name: Deploy Prod

run-name: Deploying ${{ github.event.inputs.releaseTag }} to prod

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Tag of version to be promoted to prod'
        required: true

env:
  TF_VERSION: 0.14.7
  TG_VERSION: 0.26.7
  TG_SRC_PATH: terraform
  TFC_WORKSPACE: prod
  TARGET_ENV: prod

jobs:
  deploy:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    environment: prod
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.releaseTag }}

      # Get build from cache
      - name: Restore cached build
        uses: actions/cache/restore@v3
        with:
          path: |
            **/dist
          key: ${{ github.sha }}-dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: parks-reso-public-prod-gh-action
          role-skip-session-tagging: true

      - name: Get public variables
        uses: dkershner6/aws-ssm-getparameters-action@v1
        with:
          parameterPairs: '/parks-reso-public/s3-bucket = S3_BUCKET, /parks-reso-public/origin-id = ORIGIN_ID'

      - name: Get API variables
        uses: dkershner6/aws-ssm-getparameters-action@v1
        with:
          parameterPairs: '/parks-reso-api/origin-domain = API_GATEWAY_ORIGIN_DOMAIN, /parks-reso-api/origin-id = API_GATEWAY_ORIGIN_ID, /parks-reso-api/gateway-path-pattern = API_GATEWAY_PATH_PATTERN'

      - name: Get shared variables
        uses: dkershner6/aws-ssm-getparameters-action@v1
        with:
          parameterPairs: '/parks-reso-shared/s3-bucket-assets = S3_BUCKET_ASSETS, /parks-reso-shared/origin-id-assets = ORIGIN_ID_ASSETS'

      ### Upload dist to S3 ###
      - name: Deploy to Prod S3
        env:
          s3_bucket: '${{ env.S3_BUCKET }}-${{ env.TARGET_ENV }}'
          dir_name: ${{ github.event.inputs.releaseTag }}
        run: |
          aws s3 sync dist/parks-reso-public s3://$s3_bucket/$dir_name/dayuse

      ### Run Terragrunt ###
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.3.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - name: Terragrunt Apply
        working-directory: ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }}
        env:
          app_version: ${{ github.event.inputs.releaseTag }}
          s3_bucket: ${{ env.S3_BUCKET }}
          s3_bucket_assets: ${{ env.S3_BUCKET_ASSETS }}
          origin_id: ${{ env.ORIGIN_ID }}
          api_gateway_origin_domain: ${{ env.API_GATEWAY_ORIGIN_DOMAIN }}
          api_gateway_origin_id: ${{ env.API_GATEWAY_ORIGIN_ID }}
          api_gateway_path_pattern: ${{ env.API_GATEWAY_PATH_PATTERN }}
          origin_id_assets: ${{ env.ORIGIN_ID_ASSETS }}
          auth_user: ${{ secrets.BASIC_AUTH_USER }}
          auth_pass: ${{ secrets.BASIC_AUTH_PASS }}
          ssl_cert_arn: ${{ secrets.PARKS_SSL_CERT_ARN }}
        run: terragrunt apply-all --terragrunt-non-interactive
