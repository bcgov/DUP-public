name: Deploy Dev

on:
  push:
    branches: [main]

env:
  TF_VERSION: 0.14.7
  TG_VERSION: 0.26.7
  TG_SRC_PATH: terraform
  TFC_WORKSPACE: dev
  TARGET_ENV: dev

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    environment: dev
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - run: yarn lint
      - name: Cancelling workflow due to error
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.2

  test:
    name: Test
    runs-on: ubuntu-20.04
    environment: dev
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - run: yarn test-ci
      - name: Cancelling workflow due to error
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.2

  build:
    name: Build and Upload S3 Sandbox
    needs: [lint, test]
    runs-on: ubuntu-20.04
    environment: dev
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Declare short SHA
        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

      - name: Setting configEndpoint to true
        run: sed 's@localConfigEndpoint@'true'@g' src/env.js.template | sed 's@gitHubHash@'"$GITHUB_SHA_SHORT"'@g' > src/env.js

      - run: yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_SANDBOX }}
          role-duration-seconds: 900
          role-session-name: parks-reso-public-sandbox-gh-action
          role-skip-session-tagging: true

      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/parks-reso-sandbox/s3-bucket-public-artifacts'
          env_variable_name: 'S3_BUCKET_ARTIFACTS'

      - name: Save artifact to S3
        env:
          s3_bucket: '${{ env.S3_BUCKET_ARTIFACTS }}'
          dir_name: ${{ github.sha }}
        run: |
          aws s3 sync dist/parks-reso-public s3://$s3_bucket/$dir_name/

      - name: Cancelling workflow due to error
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.2

  s3:
    name: Upload to S3 Dev
    needs: [build]
    runs-on: ubuntu-20.04
    environment: dev
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_SANDBOX }}
          role-duration-seconds: 900
          role-session-name: parks-reso-public-sandbox-gh-action
          role-skip-session-tagging: true

      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/parks-reso-sandbox/s3-bucket-public-artifacts'
          env_variable_name: 'S3_BUCKET_ARTIFACTS'

      - name: Copy from s3 sandbox
        env:
          s3_bucket: '${{ env.S3_BUCKET_ARTIFACTS }}'
          dir_name: ${{ github.sha }}
        run: |
          aws s3 sync s3://$s3_bucket/$dir_name/ dist/parks-reso-public

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: parks-reso-public-dev-gh-action
          role-skip-session-tagging: true

      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/parks-reso-public/s3-bucket'
          env_variable_name: 'S3_BUCKET'

      - name: Deploy to Dev S3
        env:
          s3_bucket: '${{ env.S3_BUCKET }}-${{ env.TARGET_ENV }}'
          dir_name: ${{ github.sha }}
        run: |
          aws s3 sync dist/parks-reso-public s3://$s3_bucket/$dir_name/dayuse

  terragrunt:
    name: Run Terragrunt
    needs: ['s3']
    runs-on: ubuntu-20.04
    environment: dev
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: parks-reso-public-dev-gh-action
          role-skip-session-tagging: true

      # Public variables
      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/parks-reso-public/s3-bucket'
          env_variable_name: 'S3_BUCKET'
      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/parks-reso-public/origin-id'
          env_variable_name: 'ORIGIN_ID'

      # API variables
      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: /parks-reso-api/origin-domain
          env_variable_name: 'API_GATEWAY_ORIGIN_DOMAIN'
      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: /parks-reso-api/origin-id
          env_variable_name: 'API_GATEWAY_ORIGIN_ID'
      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: /parks-reso-api/gateway-path-pattern
          env_variable_name: 'API_GATEWAY_PATH_PATTERN'

      # Shared variables
      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/parks-reso-shared/s3-bucket-assets'
          env_variable_name: 'S3_BUCKET_ASSETS'
      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/parks-reso-shared/origin-id-assets'
          env_variable_name: 'ORIGIN_ID_ASSETS'

      - name: Setup Terrafrom
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Setup terragrunt
        uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - name: Terragrunt Apply
        working-directory: ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }}
        env:
          app_version: ${{ github.sha }}
          s3_bucket: ${{ env.S3_BUCKET }}
          s3_bucket_assets: ${{ env.S3_BUCKET_ASSETS }}
          origin_id: ${{ env.ORIGIN_ID }}
          api_gateway_origin_domain: ${{ env.API_GATEWAY_ORIGIN_DOMAIN }}
          api_gateway_origin_id: ${{ env.API_GATEWAY_ORIGIN_ID }}
          api_gateway_path_pattern: ${{ env.API_GATEWAY_PATH_PATTERN }}
          origin_id_assets: ${{ env.ORIGIN_ID_ASSETS }}
        run: terragrunt apply-all --terragrunt-non-interactive

      - name: Cancelling workflow due to error
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.2
